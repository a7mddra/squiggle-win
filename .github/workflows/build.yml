name: Build & Package drawview (Windows, Dynamic)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  QT_VERSION: "6.7.0"
  # Using msvc2019_64 as it's the most common target for Qt's prebuilts
  QT_TARGET_ARCH: "msvc2019_64" 

jobs:
  build-and-package-windows:
    name: Build, Deploy, and Package (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          vsversion: 2022 # This setup is for the app compiler

      - name: Setup Python for aqt
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install aqt (Qt Installer)
        shell: pwsh
        run: |
          pip install aqtinstall

      - name: Install Qt SDK (Dynamic)
        shell: pwsh
        run: |
          # We only need qtbase (Core, Gui, Widgets) and qttools (for windeployqt)
          aqt install-qt windows desktop ${{ env.QT_VERSION }} ${{ env.QT_TARGET_ARCH }} -m qtbase qttools

      - name: Set Qt Environment Variables
        id: set-qt-env
        shell: pwsh
        run: |
          $qtRoot = (Resolve-Path "./${{ env.QT_VERSION }}/${{ env.QT_TARGET_ARCH }}").Path
          $qt6Dir = Join-Path $qtRoot "lib\cmake\Qt6"
          $qtBin = Join-Path $qtRoot "bin"
          
          if (-not (Test-Path $qt6Dir)) {
            Write-Error "Qt6_DIR not found at $qt6Dir"
            exit 1
          }
          if (-not (Test-Path (Join-Path $qtBin "windeployqt.exe"))) {
            Write-Error "windeployqt.exe not found at $qtBin"
            exit 1
          }

          Write-Host "Setting Qt6_DIR to $qt6Dir"
          Write-Host "Setting CMAKE_PREFIX_PATH to $qtRoot"
          Write-Host "Adding $qtBin to PATH"

          "Qt6_DIR=$qt6Dir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "CMAKE_PREFIX_PATH=$qtRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "$qtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Configure CMake (drawview)
        shell: pwsh
        run: |
          # CMAKE_PREFIX_PATH and Qt6_DIR are now set in the environment
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Build drawview
        shell: pwsh
        run: |
          cmake --build build --config Release --parallel

      - name: Prepare staging directory
        shell: pwsh
        run: |
          $stagingDir = "${{ github.workspace }}\staging"
          if (Test-Path $stagingDir) {
            Remove-Item $stagingDir -Recurse -Force
          }
          New-Item -ItemType Directory -Path $stagingDir | Out-Null
          
          $exePath = "${{ github.workspace }}\build\Release\drawview.exe"
          if (-not (Test-Path $exePath)) {
            Write-Error "drawview.exe not found at $exePath"
            exit 1
          }
          
          Copy-Item $exePath -Destination $stagingDir
          Write-Host "Copied drawview.exe to $stagingDir"

      - name: Run windeployqt
        shell: pwsh
        working-directory: ${{ github.workspace }}\staging
        run: |
          Write-Host "Running windeployqt..."
          # --no-translations is a common optimization unless you use them
          # --no-opengl-sw is safe if you assume users have basic graphics drivers
          # Add/remove components as needed
          windeployqt.exe --release --verbose=1 --no-translations --no-opengl-sw `
            --no-webengine --no-webview `
            drawview.exe
          
          Write-Host "windeployqt finished. Staging directory contents:"
          Get-ChildItem -Recurse | Select-Object FullName

      - name: Zip staging directory
        shell: pwsh
        run: |
          $zipFile = "${{ github.workspace }}\drawview-windows-dynamic.zip"
          Compress-Archive -Path "${{ github.workspace }}\staging\*" -DestinationPath $zipFile -Force
          Write-Host "Created $zipFile"

      - name: Upload packaged app artifact
        uses: actions/upload-artifact@v4
        with:
          name: drawview-windows-dynamic-package
          path: drawview-windows-dynamic.zip